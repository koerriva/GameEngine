#include "TextTool.h"

#define FONT_TEXTURE_SIZE       112
#define FONT_SIZE               7
#define FONT_CHAR_SPACING       -1
#define FONT_CHAR_COUNT_ROW     (FONT_TEXTURE_SIZE / FONT_SIZE)
#define FONT_CHAR_COUNT         (FONT_CHAR_COUNT_ROW * FONT_CHAR_COUNT_ROW)
#define FONT_CHAR_COUNT_ROW_DIV (1.0 / FONT_CHAR_COUNT_ROW)

#include <cstdio>

GLuint TextTool::instanceCount    = 0;
GLuint TextTool::texture          = 0;
GLuint TextTool::displayListBase  = 0;

void TextTool::CreateFontTexture()
{
  // Generate a texture handle
  glGenTextures(1, &texture);

  // Bind the texture to texture unit 0
  glBindTexture(GL_TEXTURE_2D, texture);

  // Set texture parameters
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

  const GLubyte data[FONT_TEXTURE_SIZE * FONT_TEXTURE_SIZE + 1]
    = "1111111111111100000001111111111111111111110000000111111100111001111111000000000000001111111111111111111111111111122222112222210000000122222112222211222221111000012222210112110122222100000001111100122222112222211222221122222112111211211121000000012112211211111121211112110001212111112221112111210000000122210012121111212121121211112111211210121121012100000001212121121222112121001121000121210012121211210121000000012121001212100121212112121001210121"
      "1211121121112100000001221121121212112121000111000121210012121211211121000000012221001212111121112112121111211121122222112222210000000122222112222211222100000000012221001211121122222100000001111100122222111222111222221122222111111111111111000000011111111111111111110000000001111100111011111111110000000000000011111110111110111111111111111111111111111100000001110111111111111111111111111111111111111110000000000000000111111111111111111111111111111111"
      "1222221122222100000001210121122222112222211222221122222112222210000000000000000121211222221122222112222211222221121112112111211111111121112112121111211121121211112111211211121111100011111111112121121211111211111212111112111112101211210121122212112222211212100121122112121001211221121012112210001212221122222112121000112110121210001121101211121121112111111111111121121211112111211212111121112112111211111000111111111121211212111111121112121111111211"
      "1222221122222100000000000121122222112222211222221122222112222210000000000000000121211222221122222112222211222221111111111111110000000000011111111111111111111111111111111111111000000000000000011111111111111111111111111111111111111111111111000000011111111111111111111111111111111111000000000000000111110000000011111111111111111111111111111222221122222111110001212221122222112222211222221122222100000000000000012221011111101222221122222112222211222221"
      "1211121121112112210001212121121212112121111212121121211100011111111000112121112122101212111121112112121111211121121012112101211111000121212112121211212110121212112121100001221122100012222211212210121210012101211212100121012112111211211121122100012121211212121121221112121211212211000111111110001121211122121012121111211121121211112111211222221122222111110001222121112221112221211122211122212100000000000000012121011111101222221122222112222211222221"
      "1111111111111100000001111111011111011111110111110111111100000000000000011111000000001111111111111111111111111111111111111111110111110111011111111111111111111111111111110000111000000000001110000000111111111111111111111111111112222211222221112121112101211222221122212112222211222121000012111110000111121111111012222211222221122222112222211211121121112112222211211121121112112121211211121121212111111211221000112222112112101212111121112112121111211121"
      "1210121121012111212111212121121012112121211210121121212112222211111000121212112122101212100121012112121001210121121112112111211222221121212112101211212121121012112121211212111122100012111211222210121211112111211212111121112112222211222221112121112222211210121121222112101211212221121110011110001121121111111012222211222221122222112222211111111111111101111101111111111011111111111110111111111111100000000000011111100000001111111111111111111111111111"
      "1111111111111111111111111100111111111100001111111111000000000000000000111011100000000111111111111101111111111111122222112222211222121122210012222211210000122222112100000001111111100012111210000000112222112222211122221122222112111211211121121212111121001211121121111112111211211111000122112210001122211111100012212111211121122121112111211210121121012112222210012100121012112222211210121122222100011111111000012121012210001121210121012111212101210121"
      "1211121121112112121211112111121112112111111211121121111100012211221000112221111110001221211121112112212111211121122222112222211212221122222111222111210000112221112100000001111111100012111210000000112222112222211122221122222111111111111111111111111111110111110111000001111101110000000000000000001110111000000001111111111111011111111111111111111111111111111111111111111111111111111111111111111100001110000000111100011111110111111111111101111111111111"
      "1222221122222112211211222121122222112222211222221122222100001210001111122111012222210122221122222101222211222221121112112111211221211121212112121211111121121212111111210000111000122111212111111211112121112111211121211121112112101211210121111211112121211212121000012112121210000121000012100012210122221000121012212101210121122121012101211211121121112111212211212121121112111111211211121111112100001110001111112121111112101121211121112111212111211121"
      "1222221122222112112211212221121012112222211210121122222100001210000000122111012222100122221122222101222211222221111111111111111111111111111111101111111111111011111111110000111000000011110001111110011111111111110111111111111111111111111111001111111111111111111111110011111111111100011100000000000000000011110011111110111111111111101111111222221122222111122211222221122222112221101222221122211001210000011100000000011221001222221112222112222211122221"
      "1211121121112112221211212121121211111112111212111111121111211110012100111111112221111212111122112112121111221121121012112101211212121121212112121000001121121210000011211222221001210012212211222221122222111211211222221112112112111211211121122222112121211211100111121112111001111211112111100121001111111121111112121211221121121212112211211222221122222111121211212221121000012221101210000122211001210000011100000000012222211212121112222112221211122221"
      "1111111111111100111111111111111000011111001110000111110001110000000000000000011111111111111011111111111110111111111111111111110000000111000011111111111111111111111111110111110001110000001110000000111111000000001111110001110012222211222221000000012100001222221122222112222211222221012121000121000011121000000012222100111110122221000121001211121121112111110001210000121112111111211211121111112111212110012100111212100111001211211012121012112111112111"
      "1210121121012112210001210000121212100122111212121001221112222210012100122122100121001211221011211012112211212121121112112111211111000121111112121211111121121212111111211121211001210012121110011100121121101212101211211111211112222211222221000000012222211212221122222112122211222221012121000121001211100000000012112100111110121121000121001111111111111100000001111111111111111111111111111111111101111100011100111000000000001111110000000011111100011100"
      "1111111111111100000001111111111111111101111111111111011100000000111000000000000000001111111111111111111111111111122222112222210000000122222112222211211121122222112111210111000112100011100000000000122222112222211222221122222112111211211121011111012121211112111112121111121111121211112100012111001210000000111112121211211221121212112112211210121121012111222111212121001210001121100012100011211012110001222100111000000012211212121121212112121211212121"
      "1211121121112112111211212121111211111212111112111112121111210001112100121000000011111211121122112112111211221121122222112222211110111122222112222211211121122222112111210111000012110011100000000000121012112222211210121122222111111111111111000000011111111111111111011111111111110111000000001110000000000000000011101111111111111011111111110000000111111100000001111100111011111111111110111111111111111111111111111111100000001111111111111111111111111111"
      "0000000122222111101111222100121012112221211210121122212112212211212221121222111100001222221122222112222211222221000000012111211211121121210012111211112121121112111121211221221122211112121211211110121212111111211212121111112100000001210121112221112121001222221001212112222210012121111211112122211212121122221012121210000121121212100001210000000121112101111101212111121112111121211211121111212111212211112111121111111111101211121111112112111211111121"
      "0000000122222100000001222221121012112222211210121122222112112210012221122222100000001210121122222112101211222221000000011111110000000111111111101111111111111011111111111111111001111111111110000000111011111111111110111111111100000001111111011111000000000001111111011100011111110111111111100000001111111000000011111111111111111111111111110000000122222101212100000000000122112111210001221121112112221210000000121222111111101222221122222112222211222221"
      "0000000121112101121100111110000112112112210001121121122112121210000000121212112222101212121111112112121211111121000000012101210122100012121000001211212121000012112121211212121000000012121211211210121212100001211212121000012100000001211121011211001111101111121122112111111211221121121212100000001212121122221012111211111121121112111111210000000122222101212100000000122222112111211222221121112112122210000000122222111111101210121122222112101211222221"
      "0000000111111101111100000000111111111101111111111111011111111110000000111111100000001110111111111111101111111111111111111111110011100000000011111110000000111111100000000000000000000000111000111110111111111111111111111111111112222211222221001210000000001222221000000012222210011100001110000000000112110012121012222211222221122222112222211211121121112111121110111111111211111111111112111111211101121100111110012121001121101212121111112112121211111121"
      "1210121121012112222210121221011211012222210112110122222101212100121210011111001111101212121000012112121210000121121112112111211112111011111111212111211121112121112111210111110011211001121100121210121112111111211211121111112112222211222221001210000000001211121111011112111211110111000000000111000121210011211012101211222221121012112222211111111111111100111000000000111011100000001110111000000000000000000000011111000111001110111111111111101111111111"
      "1111111111111100000000000000111111111100001111111000000011111111111111011100011111111110111111111111101110111111122222112222210000000001110012222211211000122222100000001222221122222101210001222221121012112222211210121112222112111211211121000111101121101111121112110011111211111111121112112111210121000111112112111211111121121112112111211210121121012100012211121211000012101121100000121122222112222211222221012100000001211222221000012112222211110121"
      "1211121121112100011111211121000012100112110000121111111112121211212121012111011111211211121111112112111211211121122222112222210000000111011100001210001121000012100000001211121122212101222101222221121012112222211210121112222111111111111111000000000000000000111000011100001110000000111011111111110111110111111112101111111111121011101111110000000111111100111000111110111111100000001111111000000011111111111111000000011111111110111111111111101111111111"
      "0000000122222100121000121210122222111101111222221111011112222211222221000111012222211210121122212112101211222121000000012111210012100012121011211111211121112111112111211211121121112100012101111221121112111121211211121111212100000001210121001210001212100112100122222101121001222221121012112101210001210000122112222210012121122222100121210000000121112100121000121210112111111111111121111111211112111211211121000121011112211211121111212112111211112121"
      "0000000122222100121000121210122222100000001222221001110012222211222221000111012222211210121122222112101211222221000000011111110011100011111011111110000000111111100000001111111111111100000001111111111011111111111110111111111111111111111111000000000000001111111001110011111110011100111011111101111111111111111111101111111111111011111111111222221122222100000001110111122222101121001222221011210012111211211121122222112222211210121122222112101211222221"
      "1211121121112100011101211121112111111211001121111012111012112211211221121211111222211211121112121112111211112111121012112101210001210112121101121101211000011211001222101212121121212112121100122221122222101212101222221012121012111211211121000111001121101111211112110011112110111210122112112211211212211112222112111210121210121112101212101222221122222100000000011100122222101121001222221001211012111211211121112212112222211210121012221012101210112110"
      "1111111111111100000000000000111111100111001111111001110011101111110111011111111111111110111011111011101110011100111111111111110000111111100011111110000111111111111111111111111111111111100000011111111011101111111110111111111112222211222221000112112210001222221000012112222211222221122222112221211210000001222112101211122221121012112221211211121121112100112111211111121112100001211211121121112112111211212121121000011121211211121121111112111211112121"
      "1210121121012101121101212121121012100001211210121121012112101211212121121000012121211222221121112112222210012121121112112111211121100121211112111210000121121112112111211211121121212112100001111121121112112121211211121111212112222211222221121100012221001222221000012112222211222221122222112222211210000000122112101211121211121012112222211111111111111111100001111100111111100001111111111111111111111111111111111000000011111110111011111011101111111111";

  GLubyte pixels[FONT_TEXTURE_SIZE][FONT_TEXTURE_SIZE][2];
  for (int x = 0; x < FONT_TEXTURE_SIZE; x++)
  {
    for (int y = 0; y < FONT_TEXTURE_SIZE; y++)
    {
      const unsigned char val = data[y + x * FONT_TEXTURE_SIZE];
      pixels[y][x][0] = val == '2' ? 255 : 0;
      pixels[y][x][1] = val == '0' ? 0 : 255;
    }
  }

  // Specify the texture image
  glTexImage2D(GL_TEXTURE_2D, 0, GL_LUMINANCE8_ALPHA8, FONT_TEXTURE_SIZE, FONT_TEXTURE_SIZE, 0, GL_LUMINANCE_ALPHA, GL_UNSIGNED_BYTE, pixels);
}

void TextTool::CreateDisplayLists()
{
  // Generate display lists
  displayListBase = glGenLists(FONT_CHAR_COUNT);

  // For each character
  for (GLuint i = 0; i < FONT_CHAR_COUNT; i++)
  {
    // Create a new display list
    glNewList(displayListBase + i, GL_COMPILE);

    // If newline
    if (i == '\n')
    {
      // Return to the beginning and translate to the next line
      glPopMatrix();
      glTranslatef(0.0, (GLfloat)(FONT_SIZE + FONT_CHAR_SPACING), 0.0);
      glPushMatrix();
    }
    else
    {
      // Calculate texture coordinates
      const GLfloat charX0 = (i % FONT_CHAR_COUNT_ROW) * FONT_CHAR_COUNT_ROW_DIV;
      const GLfloat charY0 = (i / FONT_CHAR_COUNT_ROW) * FONT_CHAR_COUNT_ROW_DIV;
      const GLfloat charX1 = charX0 + FONT_CHAR_COUNT_ROW_DIV;
      const GLfloat charY1 = charY0 + FONT_CHAR_COUNT_ROW_DIV;

      // Render the character
      glBegin(GL_TRIANGLE_STRIP);
      glTexCoord2f(charX0, charY0);
      glVertex2i(0, 0);
      glTexCoord2f(charX0, charY1);
      glVertex2i(0, FONT_SIZE);
      glTexCoord2f(charX1, charY0);
      glVertex2i(FONT_SIZE, 0);
      glTexCoord2f(charX1, charY1);
      glVertex2i(FONT_SIZE, FONT_SIZE);
      glEnd();
      glTranslatef((GLfloat)(FONT_SIZE + FONT_CHAR_SPACING), 0.0, 0.0);
    }

    // End the display list
    glEndList();
  }
}

TextTool::TextTool(const float scale)
  : scale(scale)
{
  // If first instance to be created
  if (!instanceCount++)
  {
    // Create font texture and display lists
    CreateFontTexture();
    CreateDisplayLists();
  }
}

TextTool::~TextTool()
{
  // If last instance to be deleted
  if (!--instanceCount)
  {
    // Delete the texture
    glDeleteTextures(1, &texture);
    texture = 0;

    // Delete the display lists
    glDeleteLists(displayListBase, FONT_CHAR_COUNT);
    displayListBase = 0;
  }
}

void TextTool::RenderText(const char text[], const int x, const int y)
{
  // Set the modelview matrix
  glMatrixMode(GL_MODELVIEW);
  glPushMatrix();
  glTranslatef((GLfloat)x, (GLfloat)y, 0.0);
  glScalef(scale, scale, scale);
  glPushMatrix();

  // Set rendering properties
  glPushAttrib(GL_ENABLE_BIT);
  glDisable(GL_DEPTH_TEST);
  glEnable(GL_TEXTURE_2D);
  glBindTexture(GL_TEXTURE_2D, texture);

  // Render the text
  glListBase(displayListBase);
  glCallLists(strlen(text), GL_UNSIGNED_BYTE, text);
  glListBase(0);

  // Restore rendering state
  glPopMatrix();
  glPopAttrib();
  glPopMatrix();
}
